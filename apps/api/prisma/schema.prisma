// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表 (Users)
model User {
  id            String   @id @default(uuid()) @db.Uuid
  wechatOpenId  String   @unique @map("wechat_openid") @db.VarChar(128)
  name          String?  @db.VarChar(255)
  birthday      DateTime? @db.Date
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  bracelets     Bracelet[]
  dailyFortunes DailyFortune[]

  // Indexes
  @@index([wechatOpenId])
  @@map("users")
}

// 手链表 (Bracelets)
model Bracelet {
  id        String    @id @default(uuid()) @db.Uuid
  nfcId     String    @unique @map("nfc_id") @db.VarChar(255)
  userId    String?   @map("user_id") @db.Uuid
  boundAt   DateTime? @map("bound_at") @db.Timestamptz
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([nfcId])
  @@index([userId])
  @@map("bracelets")
}

// 每日运势表 (Daily Fortunes)
model DailyFortune {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @map("user_id") @db.Uuid
  date                  String   @db.VarChar(10) // YYYY-MM-DD format
  overallScore          Int      @map("overall_score") @db.Integer
  comment               String   @db.Text
  careerLuck            Int      @map("career_luck") @db.Integer
  wealthLuck            Int      @map("wealth_luck") @db.Integer
  loveLuck              Int      @map("love_luck") @db.Integer
  luckyColor            String   @map("lucky_color") @db.VarChar(50)
  luckyNumber           Int      @map("lucky_number") @db.Integer
  suggestion            String   @db.Text
  recommendationId      String?  @map("recommendation_id") @db.Uuid
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz

  // 新增详细运势字段
  summary               String?  @db.Text // 今日简要总结
  astroAnalysis         String?  @map("astro_analysis") @db.Text // 星盘分析
  careerAnalysis        String?  @map("career_analysis") @db.Text // 事业运分析
  wealthAnalysis        String?  @map("wealth_analysis") @db.Text // 财富运分析
  loveAnalysis          String?  @map("love_analysis") @db.Text // 爱情运分析
  careerStars           Float?   @map("career_stars") @db.DoublePrecision // 事业运星数(0-5)
  wealthStars           Float?   @map("wealth_stars") @db.DoublePrecision // 财富运星数(0-5)
  loveStars             Float?   @map("love_stars") @db.DoublePrecision // 爱情运星数(0-5)
  avoidance             String?  @db.Text // 避免事项
  suitable              String?  @db.VarChar(50) // 今日宜
  unsuitable            String?  @db.VarChar(50) // 今日忌

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation Product? @relation(fields: [recommendationId], references: [id], onDelete: SetNull)

  // Constraints and Indexes
  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
  @@map("daily_fortunes")
}

// 商品表 (Products)
model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(255)
  description String   @db.Text
  imageUrl    String   @map("image_url") @db.VarChar(1024)
  price       Int      @db.Integer
  douyinUrl   String   @map("douyin_url") @db.VarChar(1024)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  dailyFortunesRecommendedOn DailyFortune[]

  @@map("products")
}
